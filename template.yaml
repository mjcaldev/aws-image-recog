AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Smart Image Processing Pipeline using S3, Lambda, Step Functions, Rekognition, and DynamoDB

Globals:
  Function:
    Timeout: 10
    Runtime: python3.11
    MemorySize: 128
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'POST,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"

Resources:

  ## S3 Bucket for uploads
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt TriggerStepFunctionFromS3.Arn

  ImageApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"

  ## SNS Topic for user notifications
  NotifyTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ImagePipelineNotification

  ## DynamoDB Table
  ImageMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ImageMetadata
      AttributeDefinitions:
        - AttributeName: imageId
          AttributeType: S
      KeySchema:
        - AttributeName: imageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ## Lambda: Trigger Step Function S3
  TriggerStepFunctionFromS3:
    Type: AWS::Serverless::Function
    Properties:
      Handler: triggerStepFunction.lambda_handler
      CodeUri: lambdas
      Events:
        S3Upload:
          Type: S3
          Properties:
            Bucket: !Ref UploadBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ImageProcessingStateMachine
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: ImageProcessingStateMachine

  ## Lambda: Trigger Step Function API
  TriggerStepFunctionFromApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: triggerStepFunction.lambda_handler
      CodeUri: lambdas
      Events:
        HttpUpload:
          Type: Api
          Properties:
            RestApiId: !Ref ImageApi
            Path: /upload
            Method: POST
    Environment:
      Variables:
        STATE_MACHINE_ARN: !Ref ImageProcessingStateMachine
        UPLOAD_BUCKET: !Ref UploadBucket
    Policies:
      - StepFunctionsExecutionPolicy:
          StateMachineName: ImageProcessingStateMachine

  ## Lambda: Resize Image
  ResizeImage:
    Type: AWS::Serverless::Function
    Properties:
      Handler: resizeImage.lambda_handler
      CodeUri: lambdas
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadBucket
        - S3WritePolicy:
            BucketName: !Ref UploadBucket

  ## Lambda: Rekognition Labels
  RekognitionLabels:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rekognitionLabels.lambda_handler
      CodeUri: lambdas
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectLabels
              Resource: "*"


  ## Lambda: Store Metadata
  StoreMetadata:
    Type: AWS::Serverless::Function
    Properties:
      Handler: storeMetadata.lambda_handler
      CodeUri: lambdas
      Environment:
        Variables:
          TABLE_NAME: !Ref ImageMetadataTable
          TOPIC_ARN: !Ref NotifyTopic
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImageMetadataTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt NotifyTopic.TopicName

  ## Step Function definition
  ImageProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: infrastructure/imageProcessing.asl.json
      Role: !GetAtt StepFunctionExecutionRole.Arn

  ## IAM Role for Step Function
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdas
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
Outputs:
  UploadBucketName:
    Description: "S3 bucket for image uploads"
    Value: !Ref UploadBucket
    Export:
      Name: !Sub "${AWS::StackName}-UploadBucket"

  ImageApiUploadEndpoint:
    Description: "API Gateway endpoint for image uploads"
    Value: !Sub "https://${ImageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload"
    Export:
      Name: !Sub "${AWS::StackName}-UploadEndpoint"

  StateMachineArn:
    Description: "ARN of the Image Processing State Machine"
    Value: !Ref ImageProcessingStateMachine
    Export:
      Name: !Sub "${AWS::StackName}-StateMachineArn"

  ImageMetadataTableName:
    Description: "DynamoDB table for storing image metadata"
    Value: !Ref ImageMetadataTable
    Export:
      Name: !Sub "${AWS::StackName}-MetadataTable"